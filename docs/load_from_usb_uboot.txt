Linki: 
https://anionix.ddns.net/WDMyCloud/
https://anionix.ddns.net/WDMyCloud/Other/Official_linux_kernel/


usb start

setenv mtdparts 'mtdparts=armada-nand:5m(u-boot)ro,5m@5m(uImage),5m@10m(uRamdisk),5m@15m(uImage-old),5m@20m(uRamdisk-old),5m@25m(uImage-test),5m@30m(uRamdisk-test),220m@35m(storage)'


setenv bootargs 'root=LABEL=usbrootfs console=ttyS0,115200 earlyprintk=serial'
boot
exec switch_root /newroot /sbin/init

setenv bootargs 'root=/dev/ram console=ttyS0,115200 earlyprintk=serial init=/init'

-------------------------------------------------------------------------------------
Marvell>> mtdparts

device nand0 <armada-nand>, # parts = 8
 #: name                size            offset          mask_flags
 0: u-boot              0x000000500000          0x000000000000          1
 1: uImage              0x000000500000          0x000000500000          0
 2: uRamdisk            0x000000500000          0x000000a00000          0
 3: uImage-old          0x000000500000          0x000000f00000          0
 4: uRamdisk-old        0x000000500000          0x000001400000          0
 5: uImage-test         0x000000500000          0x000001900000          0
 6: uRamdisk-test       0x000000500000          0x000001e00000          0
 7: storage             0x00000dc00000          0x000002300000          0

active partition: nand0,0 - (u-boot) 0x000000500000 @ 0x000000000000

defaults:
mtdids  : none
mtdparts: none
-------------------------------------------------------------------------------------

# Erase uImage partition as per offset and size above
nand erase 0x000000500000 0x000000500000
nand erase 0x000000f00000 0x000000500000
nand erase 0x000001900000 0x000000500000

# Erase uRamdisk partition as per offset and size above
nand erase 0x000000a00000 0x000000500000
nand erase 0x000001400000 0x000000500000
nand erase 0x000001e00000 0x000000500000

# Load uImage into memory at offset 0xa00000
fatload usb 0:1 0x02000020 uImage

# Load uRamdisk into memory at offset 0xf00000
fatload usb 0:1 0xf00000 uRamdisk

# Write uImage from memory to nand
nand write 0x02000020 0x000000500000 0x000000500000
nand write 0x02000020 0x000000f00000 0x000000500000
nand write 0x02000020 0x000001900000 0x000000500000

# Write uRamdisk from memory to nand
nand write 0xf00000 0x000000a00000 0x000000500000
nand write 0xf00000 0x000001e00000 0x000000500000
nand write 0xf00000 0x000001e00000 0x000000500000

# Set boot from primary mtd parts
setenv bootcmd 'nand read.e 0x02000020 0x000000500000 0x000000500000; nand read.e 0x2900000 0x000000a00000 0x000000500000; bootm 0x02000020 0x2900000'
saveenv

# Set boot from -old mtd parts
setenv bootcmd 'nand read.e 0x02000020 0x000000f00000 0x000000500000; nand read.e 0x2900000 0x000001400000 0x000000500000; bootm 0x02000020 0x2900000'
saveenv
reset

# Set boot from -test mtd parts
setenv bootcmd 'nand read.e 0x02000020 0x000001900000 0x000000500000; nand read.e 0x2900000 0x000001e00000 0x000000500000; bootm 0x02000020 0x2900000'
saveenv
reset

# Write primary uImage and uRamdisk images to mtd partitions at OS level:
dd if=/dev/zero of=/dev/mtdblock1
dd if=uImage of=/dev/mtdblock1
dd if=/dev/zero of=/dev/mtdblock2
dd if=uRamdisk of=/dev/mtdblock2

# Write old uImage and uRamdisk images to mtd partitions at OS level:
dd if=/dev/zero of=/dev/mtdblock3
dd if=/boot/uImage.old of=/dev/mtdblock3
dd if=/dev/zero of=/dev/mtdblock4
dd if=/boot/uRamdisk.old of=/dev/mtdblock4

# Write testing uImage and uRamdisk images to mtd partitions at OS level:
dd if=/dev/zero of=/dev/mtdblock5
dd if=/boot/uImage.test of=/dev/mtdblock5
dd if=/dev/zero of=/dev/mtdblock6
dd if=/boot/uRamdisk.test of=/dev/mtdblock6
